## ---------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ---------------------------------------------------------------------------


## Modify value of <FILL_ME> fields before running application

# Service Account info
kafka.client-id=<FILL_ME>
kafka.client-secret=<FILL_ME>

# URL of the Kafka brokers to use. The format is host1:port1,host2:port2,
# and the list can be a subset of brokers or a VIP pointing to a subset of brokers.
# This option is known as bootstrap.servers in the Kafka documentation
kafka.brokers = <FILL_ME>
# The Simple Authentication and Security Layer (SASL) Mechanism used. For the
# valid values see http://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml
kafka.sasl-mechanism = PLAIN
# Protocol used to communicate with brokers. Currently only PLAINTEXT and SSL
# are supported.
kafka.security-protocol = SASL_SSL
# Expose the kafka sasl.jaas.config parameter
kafka.sasl-jaas-config = org.apache.kafka.common.security.plain.PlainLoginModule required username='${kafka.client-id}' password='${kafka.client-secret}'; 
# The list of protocols enabled for SSL connections. TLSv1.2, TLSv1.1 and TLSv1 are enabled by default.
kafka.ssl-enabled-protocols = TLSv1.2,TLSv1.3
# The SSL protocol used to generate the SSLContext. Default setting is TLS,
# which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1,
# TLSv1.2 and TLSv1.3. SSL, SSLv2 and SSLv3 may be supported in older JVMs,
# but their usage is discouraged due to known security vulnerabilities.
kafka.ssl-protocol = TLSv1.3
# The maximum number of records returned in a single call to poll()
kafka.max-poll-records = 5000
# A string that uniquely identifies the group of consumer processes to which
# this consumer belongs. By setting the same group id multiple processes indicate
# that they are all part of the same consumer group. This option is required for consumers.
kafka.group-id = kafkaGroup
# Set if KafkaConsumer will read from beginning or end on startup:
# beginning : read from beginning
# end : read from end
# This is replacing the earlier property seekToBeginning
kafka.seek-to = beginning
# The number of consumers that connect to kafka server
kafka.consumers-count = 1
# Name of the topic to use. On the consumer you can use comma to separate
# multiple topics. A producer can only send a message to a single topic.
kafka.topic = test

# lets listen on all ports to ensure we can be invoked from the pod IP
server.address=0.0.0.0
management.server.address=0.0.0.0
management.endpoint.restart.enabled=true
management.endpoint.refresh.enabled=true
management.endpoints.web.exposure.include=health,info,restart
# lets use a different management port in case you need to listen to HTTP requests on 8080
management.server.port=8081

# disable all management enpoints except health
management.endpoints.enabled-by-default=false
management.endpoint.health.enabled=true
